#!/bin/bash
set -e

arg0="${0##*/}"
dir0="${0%/*}"

# Defaults
image_type=developer
os="debian:8"
rose_source="https://github.com/rose-compiler/rose-develop"
spock_download_dir="$HOME/.spock/downloads"

# Parse command-line
while [ "$#" -gt 0 ]; do
    case "$1" in
	--)
	    shift
	    break
	    ;;

	# The --os switch is the name of the docker base image, such as "debian:8".
	# Look in the "template" directory docker files for acceptable values.
	--os=*)
	    os="${1#--os=}"
	    shift
	    ;;
	--os)
	    os="$2"
	    shift 2
	    ;;

	# Path to the ROSE source tree, or a Git URL to be cloned.
	--rose=*)
	    rose_source="${1#--rose=}"
	    shift
	    ;;
	--rose)
	    rose_source="$2"
	    shift 2
	    ;;

	# Optional directory holding tarballs already downloaded by spock so the container doesn't have to
	# download them again.
	--downloads=*)
	    spock_download_dir="${1#--downloads=}"
	    shift
	    ;;
	--downloads)
	    spock_download_dir="$2"
	    shift 2
	    ;;

	-*)
	    echo "$arg0: unrecognized command-line switch: $1" >&2
	    exit 1
	    ;;
	*)
	    break
	    ;;
    esac
done

if [ "$#" -gt 1 ]; then
    echo "usage: $arg0 [SWITCHES] CONTAINER_TYPE" >&2
    exit 1
elif [ "$#" -eq 1 ]; then
    image_type="$1"
fi

########################################################################################################################
# Obtain ROSE source code and copy it to the destination directory.
obtain_rose_source_code() {
    local destination="$1"

    case "$rose_source" in
	http*|git*)
	    git clone --progress "$rose_source" "$destination"
	    ;;
	*)
	    edg_warning="WARNING: This image may contain EDG source code"
	    echo "$edg_warning" >&2 # and again later
	    rsync -a --exclude='_build*' "$rose_source"/ "$destination"
	    ;;
    esac
}
    
########################################################################################################################
# Given a docker instance name for an OS, return the OS upon which the instance is based.  This info is used to select
# the template for installing system software (e.g., Debian-based systems use apt-get and Fedora/RedHat systems use yum.
base_operating_system() {
    local os="$1"
    case "$os" in
	debian*|*/debian*|ubuntu*|*/ubuntu*|linux-mint|*/linux-mint*)
	    echo debian
	    ;;
	fedora*|*/fedora*)
	    echo fedora
	    ;;
	*)
	    echo "$arg0: unrecognized operating system: $os" >&2
	    exit 1
	    ;;
    esac
}

########################################################################################################################
# Create a docker image for basic ROSE development.  This image has all the prerequisites for building ROSE although
# it relies on RMC to install some of them in the container rather than the image.
build_base_image() {
    local os="$1" output_tag="$2"
    os_base=$(base_operating_system "$os")

    # Prepare to create the docker image
    local tempdir=$(mktemp --directory --tmpdir "rose-XXXXXXXXXX")
    trap "rm -rf $tempdir" EXIT
    sed "s%\\\${os}%$os%g" <"$dir0/../templates/$os_base-base" >"$tempdir/Dockerfile"
    cp "$dir0/../templates/docker-ignore" "$tempdir/.dockerignore"

    if [ -d "$spock_download_dir" ]; then
	rsync -ai "$spock_download_dir"/ "$tempdir/spock-downloads"
    else
	mkdir "$tempdir/spock-downloads"
    fi
   
    echo "about to run 'sudo docker build -t $output_tag .' in $tempdir..."
    (cd "$tempdir" && sudo docker build -t "$output_tag" .)
    rm -rf "$tempdir"
    trap - EXIT
}

########################################################################################################################
# Create a docker image suitable for running matrix tests.  This involves installing the matrix testing tools, which
# are in the $ROSE/projects/MatrixTesting directory. To that end, we start with a base image and extend it by
# downloading and compiling ROSE with no frontend languages.
build_matrix_image() {
    local base_image_tag="$1" output_tag="$2"

    local tempdir=$(mktemp --directory --tmpdir "rose-XXXXXXXXXX")
    trap "rm -rf $tempdir" EXIT
    sed "s%\\\${base_image}%$base_image_tag%g" <"$dir0/../templates/matrix-testing" >"$tempdir/Dockerfile"
    cp "$dir0/../templates/docker-ignore" "$tempdir/.dockerignore"

    obtain_rose_source_code "$tempdir/rose" || exit 1

    echo "about to run 'sudo docker build -t $output_tag .' in $tempdir..."
    (cd "$tempdir" && sudo docker build -t "$output_tag" .)

    rm -rf "$tempdir"
    trap - EXIT
}

########################################################################################################################
# Create a docker image suitable for ROSE development.  This installs the ROSE source code; configures a default
# build directory; builds, tests, and installs ROSE.
build_developer_image() {
    local base_image_tag="$1" output_tag="$2"

    local tempdir=$(mktemp --directory --tmpdir "rose-XXXXXXXXXX")
    trap "rm -rf $tempdir" EXIT
    sed "s%\\\${base_image}%$base_image_tag%g" <"$dir0/../templates/rose-devel" >"$tempdir/Dockerfile"
    cp "$dir0/../templates/docker-ignore" "$tempdir/.dockerignore"

    obtain_rose_source_code "$tempdir/rose" || exit 1

    echo "about to run 'sudo docker build -t $output_tag .' in $tempdir..."
    (cd "$tempdir" && sudo docker build -t "$output_tag" .)

    rm -rf "$tempdir"
    trap - EXIT
}

########################################################################################################################


# Build the basic development image containing all ROSE prerequisites (except those managed by spock) but not
# containing ROSE itself.
base_image_tag="$(echo "$os" |tr [:/] __)-rose-base"
build_base_image "$os" "$base_image_tag"
echo "to run this image in a container, say: sudo docker run -it $base_image_tag"

case "$image_type" in
    basic)
	: nothing more to do
	;;

    matrix)
	# Derive a new image from above by adding the matrix testing tools. Since matrix testing is part of ROSE, this
	# also installs and compiles a minimal version of ROSE.  The matrix testing tools do not need to be compiled from
	# the same version of ROSE as that which will be tested.
	matrix_image_tag="$(echo "$os" |tr [:/] __)-rose-matrix"
	build_matrix_image "$base_image_tag" "$matrix_image_tag"
	echo "to run this image in a container, say: sudo docker run -it $matrix_image_tag"
	;;

    developer)
	# Derive a new image from above by adding the ROSE source code and setting things up for doing ROSE development.
	developer_image_tag="$(echo "$os" |tr [:/] __)-rose-developer"
	build_developer_image "$base_image_tag" "$developer_image_tag"
	echo "to run this image in a container, say: sudo docker run -it $developer_image_tag"
	;;

    *)
	echo "$arg0: invalid image type: $image_type" >&2
	exit 1
	;;
esac

echo "$edg_warning" >&2
exit 0
